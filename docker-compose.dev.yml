
version: '3'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    privileged: true
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock  

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/grafana.ini:/etc/grafana/grafana.ini
      - ./config/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./config/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
      - cadvisor
    command:
      - --config=/etc/grafana/grafana.ini
      
  mlflow_server:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow_server
    deploy:
      restart_policy:
        condition: on-failure
    command: mlflow server --host 0.0.0.0 --port 5010  --backend-store-uri /mlruns
    volumes:
      - .:/app
      - ./mlruns:/mlruns
      - ./mlflow:/mlflow
    ports:
      - "5010:5010"

  server:
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile
    command: python server.py --number_of_rounds=5 --convergence_accuracy=0.8
    environment:
      DOCKER_HOST_IP: host.docker.internal
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock      
    ports:
      - "6000:6000"
      - "8265:8265"
      - "8000:8000"
    restart: always
    depends_on:
      - prometheus
      - grafana
      - cadvisor

  client1:
    container_name: client1
    build:
      context: .
      dockerfile: Dockerfile
    command: python client.py --server_address=server:8080  --client_id=1 --total_clients=2 --dp_opt=0
    restart: always
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: "6g"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "6001:6001"
    depends_on:
      - server
    environment:
      container_name: client1
      DOCKER_HOST_IP: host.docker.internal

  client2:
    container_name: client2
    build:
      context: .
      dockerfile: Dockerfile
    command: python client.py --server_address=server:8080  --client_id=2 --total_clients=2 --dp_opt=0
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1g"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "6002:6002"
    depends_on:
      - server
    environment:
      container_name: client2
      DOCKER_HOST_IP: host.docker.internal
  client3:
    container_name: client3
    build:
      context: .
      dockerfile: Dockerfile
    command: python client.py --server_address=server:8080  --client_id=3 --total_clients=4 --dp_opt=0
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2g"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "6003:6003"
    restart: always
    depends_on:
      - server
    environment:
      container_name: client3
      DOCKER_HOST_IP: host.docker.internal
  client4:
      container_name: client4
      build:
        context: .
        dockerfile: Dockerfile
      command: python client.py --server_address=server:8080  --client_id=4 --total_clients=4 --dp_opt=0
      deploy:
        resources:
          limits:
            cpus: "2"
            memory: "3g"
      volumes:
        - .:/app
        - /var/run/docker.sock:/var/run/docker.sock
      ports:
        - "6004:6004"
      restart: always
      depends_on:
        - server
      environment:
        container_name: client4
        DOCKER_HOST_IP: host.docker.internal
volumes:
  grafana-storage:

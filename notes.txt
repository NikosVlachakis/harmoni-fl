!!!!! if a specific client was not part of a previous round and its not involved in round_metrics, then
when looking for the client in client_selector in (prev_round_start_time = round_timestamps[client_properties['container_name']].get("start", None))
there will be a key error, so we need to handle this case !!!!!


docker-compose up -d grafana prometheus cadvisor mlflow_server
docker-compose up client1 client2 server

docker rm -f $(docker ps -a -q)

-https://github.com/tensorflow/privacy/blob/master/tensorflow_privacy/privacy/analysis/compute_dp_sgd_privacy_lib.py
 says about the formula for epsilon calculation from official tensorflow privacy library

- socat TCP-LISTEN:2375,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock

- https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md

- Increased the resources docker can use from the host ( memory 4 -> 7 gb) 

- https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-3-container-resource-metrics-361c5ee46e66

- EXPRESSIONS FOR CPU USAGE:
"expr": "sum(rate(container_cpu_usage_percentage_seconds_total{instance=~\"$host\",name=~\"$container\",name=~\".+\", name !~ \"(prometheus|cadvisor|grafana)\"}[10s])) by (name) *100",
"expr": "sum(rate(container_cpu_usage_percentage_seconds_total{instance=~\"$host\", name=~\"$container\", name !~ \"(prometheus|cadvisor|grafana)\"}[10s])) / sum(container_spec_cpu_quota{instance=~\"$host\", name=~\"$container\", name !~ \"(prometheus|cadvisor|grafana)\"} / container_spec_cpu_period{instance=~\"$host\", name=~\"$container\", name !~ \"(prometheus|cadvisor|grafana)\"}) by (name) *100",


- https://typeset.io/papers/fluid-mitigating-stragglers-in-federated-learning-using-3qo2tzhy
  says about a method beibg used for straggler mitigation in federated learning.(MAYBE USEFUL)

- https://github.com/google/cadvisor/issues/2026

- 
# flwr
# tensorflow==2.15.0
# tensorflow_probability==0.23.0
# tensorflow_privacy
# flask
# flask-restful
# flask_cors
# requests
# mlflow
# psutil
# scipy
# numpy
# sparse==0.13.0


{
    "epochs": 2,
    "batch_size": 64,
    "learning_rate": 0.2,
    "data_sample_percentage": 0.03,
    "freeze_layers_percentage": 0,
    "gradient_clipping_value": 6,
    "sparsification_enabled": false,
    "sparsification_method": "sparsity_threshold_bo_weight_magnitude",
    "sparsification_percentile": 95
}

cpu_usage (90-freezing) with ADAPTION:
client1:29,46,26,51,41,73,46,42,52,53
client2:84,95,95,91,95,95,94,97,97,86

memory_usage (90-freezing):
client1: 24,23,35,23,24,25,26,26,28,28
client2: 95,91,84,90,95,90,86,85,86,85


NO-ADAPTION in (freeze_layers_percentage) -GENERAL ADAPTION
cpu_usage (0-freezing):
client1:42,52,53,54,53,53,55,55,55
client2:90,DO,99,89,97,97,88,95,DO

memory_usage (0-freezing):
client1:23,29,33,35,36,37,38,39,40
client2:98,DO,98,92,93,84,81,73,DO


NO-ADAPTION at all
cpu_usage:
client1:42,50,48,51,54,57,53,56,54,57
client2:95,96,DO,98,95,DO,98,92,DO,97,DO

memory_usage:
client1:23,30,34,35,36,38,39,41,41,42
client2:97,93,DO,96,94,DO,91,95,DO,90,DO,DO,DO